name: Build and Deploy

on: [push, pull_request]

env:
    CI: true
    GITHUB_TOKEN: ${{ secrets.TOKEN }}

jobs:
    test-docker:
        name: 🔨 Build as Docker
        runs-on: ubuntu-latest

        steps:
            - name: 🚚 Get latest code
              uses: actions/checkout@v3
            - name: 🔐 Authenticate with private NPM package
              run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
            - name: 📂 Copy env file
              run: cp .env.example .env
            - name: ⚡ Build as docker image
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: false
                  tags: user/app:latest

    test-app:
        name: 🔨 Test and Build
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18.x, 20.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - name: 🚚 Get latest code
              uses: actions/checkout@v3
            - name: 🔧 Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
            - name: 🔧 Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'pnpm'
            - name: 🔐 Authenticate with private NPM package
              run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
            - name: ✨ Install packages
              run: pnpm install --frozen-lockfile --lockfile-only
            - name: 📂 Copy env file
              run: cp .env.example .env
            - name: ⚡ Build App
              run: pnpm build

    deploy:
        needs: [test-app, test-docker]
        name: 🚀 Deploy to Server
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/next'
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Execute update script on server
              uses: appleboy/ssh-action@v0.1.8
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  password: ${{ secrets.PASSWORD }}
                  port: 22
                  script: ~/docker/github.sh "${{ github.event.repository.name }}" "${{ github.head_ref || github.ref_name }}"

    read-for-release:
        name: 🔍 Read and cache version
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        needs: deploy
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.version.outputs.out }}
        steps:
            - name: 🚚 Get latest code
              uses: actions/checkout@v3
            - name: 🚚 Get current version from package
              id: version
              run: echo "out=$(npx -c 'node -p "process.env.npm_package_version"')" >> $GITHUB_OUTPUT; echo "$(npx -c 'node -p "process.env.npm_package_version"')"
            - name: 🚚 Try to get changelog
              run: echo "out=./changelogs/$(npx -c 'node -p "process.env.npm_package_version"').md" >> $GITHUB_OUTPUT; echo "$(npx -c 'node -p "process.env.npm_package_version"')"

    release:
        name: ✨ Try to create release
        needs: read-for-release
        runs-on: ubuntu-latest
        steps:
            - name: 🚚 Get latest code
              uses: actions/checkout@v3
            - name: 🏷️ Check if tag exists
              uses: mukunku/tag-exists-action@v1.2.0
              id: checkTag
              with:
                  tag: '${{ needs.read-for-release.outputs.version }}'

            - name: ✨ Release!
              if: ${{ steps.checkTag.outputs.exists == 'false' }}
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: '${{ needs.read-for-release.outputs.version }}'
                  release_name: '✨ Release ${{ needs.read-for-release.outputs.version }}-build.${{ github.run_number }} ✨'
                  body_path: './public/changelogs/${{ needs.read-for-release.outputs.version }}.md'
                  draft: false
                  prerelease: false

            - name: ❌ No Release
              if: ${{ steps.checkTag.outputs.exists == 'true' }}
              run: echo "❌ No Release needed. Release for this version already exists."
